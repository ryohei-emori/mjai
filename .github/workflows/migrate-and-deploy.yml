name: Migrate DB and Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (staging/production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  id-token: write

jobs:
  migrate:
    name: Run DB migration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migration script
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          echo "Running migration to $DATABASE_URL"
          python db/migrate_to_supabase.py

  terraform-apply:
    name: Terraform Apply
    needs: migrate
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging' }}
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Terraform Init
        run: terraform init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_render_api_key: ${{ secrets.RENDER_API_KEY }}
          TF_VAR_supabase_access_token: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          TF_VAR_supabase_org_id: ${{ secrets.SUPABASE_ORG_ID }}
          TF_VAR_gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          TF_VAR_gemini_model: ${{ secrets.GEMINI_MODEL }}
