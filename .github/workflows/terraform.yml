name: "Infrastructure Deployment"

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      run: terraform init
      env:
        # Terraform Cloud認証が必要な場合
        TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      env:
        # Render API Key
        TF_VAR_render_api_key: ${{ secrets.RENDER_API_KEY }}
        
        # Supabase管理用の認証情報
        TF_VAR_supabase_access_token: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        TF_VAR_supabase_org_id: ${{ secrets.SUPABASE_ORG_ID }}
        
        # アプリケーション用のシークレット
        TF_VAR_gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
        TF_VAR_gemini_model: ${{ secrets.GEMINI_MODEL }}

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style 🖌
          \`${{ steps.fmt.outcome }}\`
          
          #### Terraform Plan 📖
          \`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        # Render API Key
        TF_VAR_render_api_key: ${{ secrets.RENDER_API_KEY }}
        
        # Supabase管理用の認証情報
        TF_VAR_supabase_access_token: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        TF_VAR_supabase_org_id: ${{ secrets.SUPABASE_ORG_ID }}
        
        # アプリケーション用のシークレット
        TF_VAR_gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
        TF_VAR_gemini_model: ${{ secrets.GEMINI_MODEL }}